## Vincular Register de contenedores de Docker de AWS con cliente de terminal docker despues de haber creado el registro correspondiente al contenedor que se subira directamente en la consola de aws  

aws ecr get-login-password --profile Apipago --region us-east-1 | docker login --username AWS --password-stdin 010567305401.dkr.ecr.us-east-1.amazonaws.com/cluster-desarrollo

## Build y push de imagen actualizada de de docker a partir de Dockerfile correspondiente y subir a repositorio de AWS container 

docker build -t 993905722383.dkr.ecr.us-east-2.amazonaws.com/neppi-strapi-docker-desarrollo:V0.1  -f Dockerfiles/Dockerfile.dev.aws  . 

docker push 993905722383.dkr.ecr.us-east-2.amazonaws.com/neppi-strapi-docker-desarrollo:V0.1
 

## video de referencia para crear el cluster kubernetes en aws desde consola de AWS

https://www.youtube.com/watch?v=wQKEHmFLRGc&ab_channel=EnjoyableProgramming

## Conectar Cliente de terminal Kubectl a cluster creado en aws

aws eks --profile Apipago --region us-east-1 update-kubeconfig --name <nombre del cluster pelado creado en aws>

## Comprobar que se conecto el cluster efectivamente 

kubectl get all 

## hacer el deploy de los pods Segun lo que esta escrito en el  archivo kubernetes/deploy.yml

kubectl create -f kubernetes/deploy.yml

## hacer el deploy de los pods Segun lo que esta escrito en el  archivo kubernetes/deploy.yml

kubectl create -f kubernetes/deploy.yml

## de ser necesario y querer se puede lanzar el servicio de NODEPORTS para poder tener puertos expuestos hacia los nodos directamente desde internet

kubectl create -f kubernetes/serviceNodePort.yml

NOTA: Se debe dar permisos en los grupos de seguridad de la VPC para exponer los puertos por los que se entrara a la instancia del node gruop EC2

## en caso de necesitar manipular el escalodo de las replicas se puede utilizar 

kubectl scale --replicas=2 -f kubernetes/deploy.yml

(en caso de necesitar hacer modificaciones especificas en el archivo de despliege de los pods a los servicion utilizar la palabra "apply" en ves de "create". Ej kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-0.32.0/deploy/static/provider/aws/deploy.yaml)

## Ahora es necesario generar un servicio de IPCluster a la que apuntara el ingress internamente en le Cluster 

kubectl create -f kubernetes/serviceClusterIp.yml 

## ahora se genera el servicio de ingress extrayendo la instrucciones desde el archivo web https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-0.32.0/deploy/static/provider/aws/deploy.yaml

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-0.32.0/deploy/static/provider/aws/deploy.yaml

## procede a ejecurtarse el certbot en la maquina local para validar el certificado tls que se le asignara al cluster en el nombre de dominio escrito en el archivo kubernetes/ingress/ingress.yml

sudo certbot certonly --manual --preferred-challenges dns

(Se siguen las instrucciones y esto generara un par de certificados alojados en la carpeta etc de la maquina local los cuales copiaremos y cambiaremos de permisos para despues subirlos a ingress del kubernetes para ser utilizados)

Ej.

sudo cp /etc/letsencrypt/live/apipago-dev.tk/privkey.pem certtsl/privkey3.pem
sudo cp /etc/letsencrypt/live/apipago-dev.tk/fullchain.pem certtsl/fullchain3.pem
sudo chmod 745 -R certtsl/
(Eliminamos las credenciales anteriores haber sido subidas al cluster. Ej. kubectl delete secret tls-secret-apipagodesarrollo )
kubectl create secret tls tls-secret-apipagodesarrollo --key certtsl/privkey3.pem --cert certtsl/fullchain3.pem --> (con esto subimos las nueas y se proceden a colocar como identificador en el archivo kubernetes/ingress/ingress.yml en la seccion que dice) --->

spec:
  tls:
  - hosts:
    - apipago-dev.tk
    secretName: tls-secret-apipagodesarrollo
  - hosts:
    - apipago.net
    secretName: tls-secret-apipagodesarrollo

## Luego de eso se crea o aplica las modificaciones al archivo de despliague de ingress

kubectl apply -f kubernetes/ingress/ingress.yml "o" kubectl create -f kubernetes/ingress/ingress.yml


NOTA: en el caso de AWS se le asignara un balanciador de carga para el acceso externo al cluster y por ende al ingress dicho acceso en ves de una IP publica, posee un nombre de dominio como este Ej. a109c5097dab642d5be5dfc5c4288150-41e61ac217745a72.elb.us-east-1.amazonaws.com

EN ese caso debe crear un registro DNS de tipo CNAME en el proveedor o manager de nombre de dominio donde se encuntre manajado el nombre de dominio que decidio utilizar para el clusted.. en dicho registro el valor al que apuntara sera el nombre de dominio del balanciador de carga (a109c5097dab642d5be5dfc5c4288150-41e61ac217745a72.elb.us-east-1.amazonaws.com)

Puede hacer eso... o seria preferible cambiar el manegador de su dominio a Router 53 de amanzon... solo debe ir al servicio y registar una zona de alojamiento nueva, y cambiar los servidores NS en si proveedor de nombres de dominio